import { LogsEvent, LogsSubscriptionFilter, NewHeadsEvent } from './websocket-backfiller';
declare type JsonRpcId = string | number | null;
export interface JsonRpcRequest {
    jsonrpc: '2.0';
    method: string;
    params?: any[];
    id?: JsonRpcId;
}
export interface VirtualSubscription {
    event: EthersEvent;
    virtualId: string;
    physicalId: string;
    method: string;
    params: any[];
    isBackfilling: boolean;
    startingBlockNumber: number;
    sentEvents: any[];
    backfillBuffer: any[];
}
export interface JsonRpcResponse<T = any> {
    jsonrpc: '2.0';
    result?: T;
    error?: JsonRpcError;
    id: JsonRpcId;
}
interface JsonRpcError<T = any> {
    code: number;
    message: string;
    data?: T;
}
export interface NewHeadsSubscription extends VirtualSubscription {
    method: 'eth_subscribe';
    params: ['newHeads'];
    isBackfilling: boolean;
    sentEvents: NewHeadsEvent[];
    backfillBuffer: NewHeadsEvent[];
}
export interface LogsSubscription extends VirtualSubscription {
    method: 'eth_subscribe';
    params: ['logs', LogsSubscriptionFilter?];
    isBackfilling: boolean;
    sentEvents: LogsEvent[];
    backfillBuffer: LogsEvent[];
}
export declare type WebSocketMessage = SingleOrBatchResponse | SubscriptionEvent;
export declare type SingleOrBatchResponse = JsonRpcResponse | JsonRpcResponse[];
export {};
